# 9b9cd634b6f2eee30a4dd87cfc5ac9e1fbb44fa08cc628b99ebf8752d407fddd Elan 1.3.1 guest default_profile valid

main
  let order be inputIntBetween("Enter order of dragon [1..12]: ", 1, 12)
  call clearPrintedText()
  print "Dragon of order {order}"
  let side be 75.0/(sqrt(2)^order)
  let corner be side/12.0/cos(45)
  variable turns set to left
  for i from 1 to order step 1
    set turns to setTurns(turns)
  end for
  variable t set to new Turtle()
  call setupTurtle(t, order)
  call drawDragon(t, order, turns, side, corner)
end main

constant left set to "1"

constant right set to "0"

procedure drawDragon(t as Turtle, order as Int, turns as String, side as Float, corner as Float)
  let p be 200 div order
  variable turnI set to 0
  each turn in turns
    set turnI to (if turn is left then 1 else -1)
    call t.turn(-45*turnI)
    call t.move(corner)
    call t.turn(-45*turnI)
    call t.move(side)
    call pause(p)
  end each
  call t.penUp()
  call t.hide()
end procedure

procedure setupTurtle(t as Turtle, order as Int)
  call t.turnToHeading(180 + order*45)
  call t.placeAt(-40, 20)
  call t.penColour(red)
  call t.penWidth(10.0/order)
  call t.penDown()
  call t.show()
end procedure

function setTurns(turns as String) returns String
  variable turnsR set to turns + left + reflect(turns)
  return turnsR[0..turnsR.length() - 1]
end function

function reflect(s as String) returns String
  variable sR set to empty String
  for i from 1 to s.length() step 1
    set sR to (if s[i - 1] is left then right else left) + sR
  end for
  return sR
end function

test 
  assert reflect("110") is "100"
  assert reflect("00001") is "01111"
  assert setTurns("1") is "11"
  assert setTurns("11") is "1110"
  assert setTurns("110") is "110110"
  assert setTurns("1101100") is "11011001110010"
end test
